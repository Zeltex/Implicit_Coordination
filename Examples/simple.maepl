_domain Pepper {
	_announce_enabled = true
	_reflexivity = true
	_types = [container, object, agent, perceivable]
	_propositions = [
		in(container c, object o)
	]

	_action pickup (container from, container to, object o) {
		_owner = agent to
		_designated_events = [event0]
		_event event0 { 
			_preconditions = ( in(from, o) )
			_effect_add = [in(to, o)]
			_effect_delete = [in(from, o)]

		}
	}

	_action perceive (container c, object o) {
		_owner = perceivable agent
		_designated_events = [event0, event1]
		_event event0 { 
			_preconditions = ( in(c, o) )
			_effect_add = [ ]
			_effect_delete = [ ]

		}
		_event event1 { 
			_preconditions = ( NOT(in(c, o)) )
			_effect_add = [ ]
			_effect_delete = [ ]

		}
	}
}
_problem simple_problem {
	_objects = {
		container = [box0, box1, box2, L]
		object = [red_cube]
		agent = [Pepper, L]
		perceivable = [L]
	}
	_initial_state = [
		in(box1, red_cube)
	]
	_world world0 [in(box0, red_cube)]
	_world world1 [in(box1, red_cube)]
	_world world2 [in(box2, red_cube)]
	_goal = [in(L, red_cube)]
	_designated_worlds = [ world1 ]
	_reflexivity = true
	_reachability = {
		L = {
			(world0, world1)
			(world0, world2)
			(world1, world0)
			(world1, world2)
			(world2, world0)
			(world2, world1)
		}
	}
}


