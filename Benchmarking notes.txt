Benchmarking notes

-- Thorsten planner
	It is essentially the same as ours, except they have a couple more optimisations, and are not using bisimilar contraction and only a simple bisimulation check. The extra optimisations are using dynamic_bitset for propositions, and only generating grounded actions which can become applicable at some point. Also they can automatically recognise rigid atoms.


-- Optimisations/Improvements implemented on pepper
	- Option to define rigid atoms
	- Saving perspective shifts between attempting different actions
	- Pruning actions which are guaranteed not applicable (though this is done for every state, so not efficient atm)
	- Sorting atoms when creating the bisimilar contracted states (significant speed up, and total state reduction)


-- Optimisations/Improvements to be implemented
	- Use either Dynamic_Bitset or global ids for atoms
	- Generate only actions which can become applicable

-- Optimisations/Improvements ideas (should not necessarily be implemented)
	- Exploit states that are fully connected by creating fully connected components of worlds. May add overhead in adding worlds though
	- Manually check if an announce action breaks a relation, if not there are no changes, and the action can be discarded
	- General optimisations like trying to merge operations together, i.e. removing unreachable worlds during a product update
	- Reachability should be represented as distinguishability relation instead of indistinguishability
	- Goal formula should be able to use for all so it can be checked more efficiently


-- Notes for next meeting
	- Explain description of Thorsten planner
	- Note the extra explanation needed for bisimilar contraction
	- Go over performance/benchmarks


-- Benchmarks
	../Examples/MAPF/p12.maepl Hashes with and without contraction, and calculation time (ms)
	Baseline hashes, 40, 328, 1432, 4792, 14320, 37812, 91568, 204044
	Contracted hashes, 40, 230, 480, 832, 1424, 2516, 4212, 6700
	Baseline time, 7, 307, 2132, 8026, 25973, 74973, 194476, 459382
	Contracted time, 21, 742, 3414, 5880, 9745, 16577, 28443, 44093

	../Examples/Dice5-3.maepl Hashes with and without contraction, and calculation time (ms)
	Baseline hashes, 15, 240, 3840, 61440
	Contracted hashes, 15, 135, 960, 5940
	Baseline time, 0, 24, 3885, 1771847
	Contracted time, 0, 52, 4957, 443589

	../Examples/Block_Search.maepl Hashes with and without contraction, and calculation time (ms)
	Baseline hashes, 108, 468, 1212, 2136, 2824, 3160, 3256, 3268, 3268
	Contracted hashes, 108, 468, 1212, 2136, 2824, 3160, 3256, 3268, 3268
	Baseline time, 21, 1805, 5435, 11426, 17217, 20819, 21731, 22204, 22030
	Contracted time, 85, 5722, 18779, 38122, 56945, 67314, 70786, 71484, 71220


-- TODO
	Need to create a General_Formula using Proposition_Instance, but no evaluation is needed
	Make sure agents use regular proposition ids
	Test Domain_Interface_Implementation::set_objects
	Change agents to use Atom_Id
	Domain_Loader should keep track of its own proposition_instances
	Convert Domain_Loader to use const ref

	Fix General_Action::get_condition_owner_to_agent
	Formula_Input_Impl::get_reachable_worlds need a better way to handle agent
	Handle agents
	TODO - Domain::objects is using unordered_set with Atom_Id, causing error
	Check if add/delete lists of actions are parsed correctly

	52d110cf5d17154548fe3026a4715f387a229aa8
	4f0a487e907f5b666bcfbbf89e76ec7840552a4f
	6e8d8d680bbeff0985b7352dfbf13703b3ca0976